library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
install.packages('bitops')
#install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
install.packages("bitops")
#install.packages('bitops')
#install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
#Be sure youâve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
load("~/vnayak_data_bkp/Udacity/git_workspace/DiamondDataSet/diamonds-data/BigDiamonds.Rda")
#Be sure youâve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
#install.packages('bitops')
#install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape') # we used reshape2
#install.packages('plyr')  # we used dplyr
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
p1<-ggplot(aes(x=price),data = diamonds)+
geom_histogram(fill=I('#F79420'),binwidth = 100)+
ggtitle('Price')
p2<-ggplot(aes(x=price),data = diamonds)+
geom_histogram(fill=I('#B22222'),binwidth = 0.01)+
scale_x_log10()+
ggtitle('Price log 10')
grid.arrange(p1,p2,ncol=2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
#install.packages('RColorBrewer', dependencies = TRUE)
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
#install.packages('bitops')
#install.packages('RCurl')
library('bitops')
library('RCurl')
install.packages("swirl")
data("AirPassengers")
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg = lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN = mean))
boxplot(AirPassengers~cycle(AirPassengers))
plot(aggregate(AirPassengers,FUN = mean))
DecomposedTS<-decompose(AirPassengers)
plot(DecomposedTS)
?decompose
install.packages('forecast')
library(forecast)
?auto.arima
TSfit<-auto.arima(AirPassengers)
TSfit<-auto.arima(AirPassengers)
TSforecast=predict(TSfit,24)
Ulimit<-TSforecast$pred + 2*TSforecast$se
Llimit<-TSforecast$pred - 2*TSforecast$se
ts.plot(AirPassengers,TSforecast$pred,Ulimit,Llimit,col=c(1,2,4,4),lty=c(1,1,2,2))
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
passengerData<-diff(log(AirPassengers))
adf.test(passengerData,alternative="stationary",k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(log(AirPassengers))
install.packages('fUnitRoots')
library(fUnitRoots)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
?adfTest
install.packages('tseries')
install.packages("tseries")
library(tseries)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(diff(log(AirPassengers)))
pacf(log(AirPassengers))
pacf(diff(log(AirPassengers)))
fit<-arima(log(AirPassengers),c(0,1,1),seasonal = list(order=c(0,1,1),period=12))
pred<-predict(fit,n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
# Chunk 1
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(gridExtra)
library('bitops')
library('RCurl')
library(GGally)
library(scales)
library(memisc)
# Chunk 2
# Load the Data
setwd('C:/Users/vnayak/Documents/github_R')
getwd()
#list.files()
redwinedf<-read.csv('wineQualityReds.csv')
names(redwinedf)
str(redwinedf)
summary(redwinedf)
# Chunk 3
# We will analyze the quality variable.
ggplot(aes(x=quality),data = redwinedf)+
geom_histogram(binwidth = 0.5)+
scale_x_continuous(breaks = seq(3,8,0.5))
# Chunk 4: Analysis of variable quality
# Chunk 5
summary(redwinedf$alcohol)
ggplot(aes(x=alcohol),data = redwinedf)+
geom_histogram(binwidth = 0.1)+
scale_x_continuous(breaks = seq(8.40,14.90,0.5))
# Chunk 6
ggplot(aes(x=alcohol),data = redwinedf)+
geom_histogram(binwidth = 0.01)+
scale_x_log10()
# Chunk 7
ggplot(aes(x=quality),data = subset(redwinedf,alcohol>=9.5))+
geom_histogram(binwidth = 0.5)
# Chunk 8
#Analyze the sulphate variable
summary(redwinedf$sulphates)
ggplot(aes(x=sulphates),data = redwinedf)+
geom_histogram(binwidth = 0.05)+
scale_x_continuous(breaks = seq(0.3,2,0.1))
# Chunk 9
# Analyzed the distribution of the variable. Its normally distributed.
ggplot(aes(x=sulphates),data = redwinedf)+
geom_histogram(binwidth = 0.01)+
scale_x_log10(breaks=seq(0.3,1,0.1))
# Chunk 10
ggplot(aes(x=pH),data = redwinedf)+
geom_histogram(binwidth = 0.01)+
scale_x_continuous(breaks = seq(2.740,4.010,0.1))
# Chunk 11
ggplot(aes(x=density),data = redwinedf)+
geom_histogram(binwidth = 0.001)+
scale_x_continuous(breaks = seq(0.990,1.0037,0.001))
# Chunk 12
summary(redwinedf$residual.sugar)
ggplot(aes(x=residual.sugar),data = redwinedf)+
geom_histogram(binwidth = 0.5)+
scale_x_continuous(breaks = seq(0.900,15,1))
# Chunk 13
ggplot(aes(x=residual.sugar),data = redwinedf)+
geom_histogram(binwidth = 0.1)+
scale_x_log10(breaks=seq(1,10,1))
# Chunk 14
ggplot(aes(x=residual.sugar),data = subset(redwinedf,redwinedf$residual.sugar <2.6))+
geom_histogram(binwidth = 0.08)+
scale_x_continuous(breaks = seq(0.90,2.6,0.1))
# Chunk 15
redwinedf$quality.factor<-cut(redwinedf$quality,c(2,4,5,6,7,8,9))
# Chunk 16
p1<-ggplot(aes(x=quality,y=alcohol),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 17
#correlation between quality and alcohol
cor.test(redwinedf$quality,redwinedf$alcohol)
# Chunk 18
#scatter plot for quality and pH,
p2<-ggplot(aes(x=quality,y=pH),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 19
#correlation between quality and pH,
cor.test(redwinedf$quality,redwinedf$pH)
# Chunk 20
#scatterplot for quality vs residual sugar,
p3<-ggplot(aes(x=quality,y=residual.sugar),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 21
#corrrelation
cor.test(redwinedf$quality,redwinedf$residual.sugar)
# Chunk 22
#fixed.acidity and quality,
p4<-ggplot(aes(x=quality,y=fixed.acidity),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 23
#correlation between quality and fixed.acidity
cor.test(redwinedf$quality,redwinedf$fixed.acidity)
# Chunk 24
#quality and volatile.acidity
p5<-ggplot(aes(x=quality,y=volatile.acidity),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 25
#correlation between quality and volatile.acidity
cor.test(redwinedf$quality,redwinedf$volatile.acidity)
cor.test(redwinedf$quality,redwinedf$citric.acid)
# Chunk 26
#quality and citric acid
p6<-ggplot(aes(x=quality,y=citric.acid),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 27
#quality and chlorides
p7<-ggplot(aes(x=quality,y=chlorides),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 28
#quality and free.sulphur.dioxide
p8<-ggplot(aes(x=quality,y=free.sulfur.dioxide),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 29
#quality and total sulphur dioxide
p9<-ggplot(aes(x=quality,y=total.sulfur.dioxide),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 30
#quality and sulphates
p10<-ggplot(aes(x=quality,y=sulphates),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 31
#quality and density
p11<-ggplot(aes(x=quality,y=density),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
# Chunk 32
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,ncol=3)
# Chunk 33
#relationship between fixed.acidity and volatile.acidity
ggplot(aes(x=fixed.acidity,y=volatile.acidity),data = redwinedf)+
geom_point()+
geom_smooth(method = 'lm',color='red')
cor.test(redwinedf$fixed.acidity,redwinedf$volatile.acidity)
# Chunk 34
#relationship between free.sulphur.dioxide and total.sulfur.dioxide
ggplot(aes(x=free.sulfur.dioxide,y=total.sulfur.dioxide),data = redwinedf)+
geom_point(alpha=1/10,position = position_jitter(h=0))+
geom_smooth(method = 'lm',color='red')
cor.test(redwinedf$free.sulfur.dioxide,redwinedf$total.sulfur.dioxide)
# Chunk 35
#box plot between quality.factor and alcohol
ggplot(aes(x=quality.factor,y=alcohol),data = redwinedf)+
geom_boxplot()
# Chunk 36
#box plot between quality.factor and citric.acid
ggplot(aes(x=quality.factor,y=citric.acid),data = redwinedf)+
geom_boxplot()
# Chunk 37
#box plot between quality.factor and sulphates
ggplot(aes(x=quality.factor,y=sulphates),data = redwinedf)+
geom_boxplot()
# Chunk 38
# Chunk 39
#Scatterplot with quality and alcohol using color
ggplot(aes(x=quality,y=alcohol,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/5,position = position_jitter(h=0))
# Chunk 40
ggplot(aes(x=quality,y=citric.acid,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/5,position = position_jitter(h=0))
# Chunk 41
ggplot(aes(x=quality,y=sulphates,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/2,position = position_jitter(h=0))+
ylim(0,quantile(redwinedf$sulphates,0.99))+
scale_color_brewer(type = 'qual')
# Chunk 42
ggplot(aes(x=quality,y=total.sulfur.dioxide,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/5,position = position_jitter(h=0))
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,ncol=3)
#Scatterplot with quality and alcohol using color
ggplot(aes(x=quality,y=alcohol,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/5,position = position_jitter(h=0))
# Analyzed the distribution of the variable. Its normally distributed.
ggplot(aes(x=sulphates),data = redwinedf)+
geom_histogram(binwidth = 0.01)+
scale_x_log10(breaks=seq(0.3,1,0.1))
ggplot(aes(x=pH),data = redwinedf)+
geom_histogram(binwidth = 0.01)+
scale_x_continuous(breaks = seq(2.740,4.010,0.1))
ggplot(aes(x=density),data = redwinedf)+
geom_histogram(binwidth = 0.001)+
scale_x_continuous(breaks = seq(0.990,1.0037,0.001))
summary(redwinedf$residual.sugar)
ggplot(aes(x=residual.sugar),data = redwinedf)+
geom_histogram(binwidth = 0.5)+
scale_x_continuous(breaks = seq(0.900,15,1))
#Scatterplot with quality and alcohol using color
ggplot(aes(x=quality,y=alcohol,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/5,position = position_jitter(h=0))
#quality and volatile acidity, non linear relationship
ggplot(aes(x=quality,y=volatile.acidity,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/5,position = position_jitter(h=0))+
scale_color_brewer(type = 'qual')
ggplot(aes(x=quality,y=total.sulfur.dioxide,color=quality.factor),data = redwinedf)+
geom_point(alpha=1/5,position = position_jitter(h=0))
